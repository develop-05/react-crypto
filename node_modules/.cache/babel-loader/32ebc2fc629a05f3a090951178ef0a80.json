{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-crypto\\\\src\\\\components\\\\Authentication\\\\Login.jsx\",\n    _s = $RefreshSig$();\n\nimport { Box, Button, TextField } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport { CryptoState } from \"../../CryptoContext\";\nimport { auth } from \"../../firebase\";\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = _ref => {\n  _s();\n\n  let {\n    handleClose\n  } = _ref;\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isType, setIsType] = useState(true);\n\n  const onSubmit = SubmitHandler = data => console.log(data);\n\n  const {\n    setAlert\n  } = CryptoState();\n\n  const handleSubmit = async () => {\n    if (!email || !password) {\n      setAlert({\n        open: true,\n        message: \"Заполните поля\",\n        type: \"warning\"\n      });\n      return;\n    }\n\n    try {\n      const result = await signInWithEmailAndPassword(auth, email, password);\n      setAlert({\n        open: true,\n        message: `Успех. Привет ${result.user.email}`,\n        type: \"success\"\n      });\n      handleClose();\n    } catch (error) {\n      setAlert({\n        open: true,\n        message: error.message,\n        type: \"error\"\n      });\n      return;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    p: 3,\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      variant: \"outlined\",\n      type: \"email\",\n      label: \"Email\",\n      value: email,\n      onChange: e => setEmail(e.target.value),\n      fullWidth: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      variant: \"outlined\",\n      label: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n      type: \"password\",\n      value: password,\n      onChange: e => setPassword(e.target.value),\n      fullWidth: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      size: \"large\",\n      onClick: handleSubmit,\n      style: {\n        backgroundColor: \"#EEBC1D\"\n      },\n      children: \"\\u0412\\u043E\\u0439\\u0442\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"Cx80YbnjwazqpfSyk4bjfbiEmCs=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["D:/react-crypto/src/components/Authentication/Login.jsx"],"names":["Box","Button","TextField","useState","CryptoState","auth","signInWithEmailAndPassword","Login","handleClose","email","setEmail","password","setPassword","isType","setIsType","onSubmit","SubmitHandler","data","console","log","setAlert","handleSubmit","open","message","type","result","user","error","display","flexDirection","gap","e","target","value","backgroundColor"],"mappings":"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","sourcesContent":["import { Box, Button, TextField } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport { CryptoState } from \"../../CryptoContext\";\nimport { auth } from \"../../firebase\";\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\n\nconst Login = ({ handleClose }) => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const [isType, setIsType] = useState(true);\n\n  const onSubmit = SubmitHandler = data => console.log(data);\n\n  const { setAlert } = CryptoState();\n\n  const handleSubmit = async () => {\n    if (!email || !password) {\n      setAlert({\n        open: true,\n        message: \"Заполните поля\",\n        type: \"warning\",\n      });\n      return;\n    }\n\n    try {\n      const result = await signInWithEmailAndPassword(auth, email, password);\n      setAlert({\n        open: true,\n        message: `Успех. Привет ${result.user.email}`,\n        type: \"success\",\n      });\n\n      handleClose();\n    } catch (error) {\n      setAlert({\n        open: true,\n        message: error.message,\n        type: \"error\",\n      });\n      return;\n    }\n  };\n\n  return (\n    <Box\n      p={3}\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: \"20px\",\n      }}\n    >\n      <TextField\n        variant=\"outlined\"\n        type=\"email\"\n        label=\"Email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        fullWidth\n      />\n      <TextField\n        variant=\"outlined\"\n        label=\"Пароль\"\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        fullWidth\n      />\n      <span>\n\n      </span>\n      <Button\n        variant=\"contained\"\n        size=\"large\"\n        onClick={handleSubmit}\n        style={{ backgroundColor: \"#EEBC1D\" }}\n      >\n        Войти\n      </Button>\n    </Box>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}